import { HorizontalBox, VerticalBox, Button, ScrollView, TextEdit } from "std-widgets.slint";
import { Kolory } from "colors.slint";
import { PrzyciskAkcji } from "components/PrzyciskAkcji.slint";
import { PozycjaMenu } from "components/PozycjaMenu.slint";

import "../resources/fonts/Geist-Regular.otf";
import "../resources/fonts/Geist-Bold.otf";
import "../resources/fonts/GeistMono-Regular.otf";
import { ConsoleWindow } from "console_window.slint";
import { MetaWindow } from "meta_window.slint";
import { ParameterSlider } from "ParameterSlider.slint";
import { HistogramWindow } from "components/HistogramWindow.slint";


// Miniaturki folderu roboczego
export struct ThumbItem {
  img: image,
  name: string,
  size: string,
  layers: string,
  path: string,
  width: int,  // rzeczywista szerokość miniaturki
  height: int, // rzeczywista wysokość miniaturki
}

export component AppWindow inherits Window {
    in-out property <[ThumbItem]> thumbnails: [];
    title: "EXRuster";
    icon: @image-url("../resources/img/icon.png");
    background: Kolory.tlo;
    default-font-family: "Geist";
    preferred-width: 1200px;
    preferred-height: 700px;
    min-width: 400px;
    min-height: 300px;
    
    // Properties for column widths
    in-out property <float> column1-percent: 0.15;
    in-out property <float> column2-percent: 0.70;
    in-out property <float> column3-percent: 0.15; // niezależne, nie powiązane z kolumnami
    // Widoczność skrajnych kolumn
    in-out property <bool> show-left-panel: true;
    in-out property <bool> show-right-panel: true;
    
    // Menu state
    in-out property <bool> file-menu-open: false;
    in-out property <bool> view-menu-open: false;
    
    // Menu auto-close timers
    property <bool> file-menu-timer-running: false;
    property <bool> view-menu-timer-running: false;
    
    // Status bar properties
    in-out property <string> status-text: "Ready";
    in-out property <float> progress-value: 0.0;
    
    // Loading state properties
    in-out property <bool> is-loading: false;
    in-out property <string> loading-operation: "";
    in-out property <int> loading-progress-current: 0;
    in-out property <int> loading-progress-total: 0;
    
    in-out property <image> exr-image;
    // Usunięto system zakładek
    in-out property <[string]> layers-model: [];
    in-out property <[color]> layers-colors: [];
    in-out property <[int]> layers-font-sizes: [];
    in-out property <string> selected-layer-item: "";
    // konsola w oknie pływającym — model linii nieużywany tutaj
    in-out property <string> console-text: "";
    in-out property <string> meta-text: "";
    in-out property <[string]> meta-table-keys: [];
    in-out property <[string]> meta-table-values: [];
    in-out property <bool> internal-console-visible: false; // New property for internal console visibility
    
    // Histogram data properties
    in-out property <[int]> histogram-red-data: [];
    in-out property <[int]> histogram-green-data: [];
    in-out property <[int]> histogram-blue-data: [];
    in-out property <[int]> histogram-luminance-data: [];
    in-out property <float> histogram-min-value: 0.0;
    in-out property <float> histogram-max-value: 1.0;
    in-out property <int> histogram-total-pixels: 0;
    in-out property <float> histogram-p1: 0.0;
    in-out property <float> histogram-p50: 0.5;
    in-out property <float> histogram-p99: 1.0;
    // Meta floating window state
    in-out property <bool> internal-meta-visible: false;
    // Histogram floating window state
    in-out property <bool> internal-histogram-visible: false;
    callback clear-console();

    // Helper properties to mirror column layout for positioning elements in the menu bar
    // These compute the effective normalized widths of the three columns and allow
    // us to align menu content with the right panel horizontally
    property <length> _menu_non_column_width: 8px + (show-left-panel ? 2px : 0px) + (show-right-panel ? 2px : 0px);
    property <float> _menu_col1_eff: show-left-panel ? column1-percent : 0.0;
    property <float> _menu_col2_eff: column2-percent + (show-left-panel ? 0.0 : column1-percent) + (show-right-panel ? 0.0 : column3-percent);
    property <float> _menu_col3_eff: show-right-panel ? column3-percent : 0.0;
    property <float> _menu_sum_eff: max(0.0001, column1-percent + column2-percent + column3-percent);
    property <float> _menu_n1: _menu_col1_eff / _menu_sum_eff;
    property <float> _menu_n2: _menu_col2_eff / _menu_sum_eff;
    property <float> _menu_n3: _menu_col3_eff / _menu_sum_eff;
    property <length> _right_panel_width: (root.width - _menu_non_column_width) * _menu_n3;
    property <length> _right_panel_x: 4px + (show-left-panel ? 2px : 0px) + (root.width - _menu_non_column_width) * (_menu_n1 + _menu_n2) + (show-right-panel ? 2px : 0px);

    // Kolory kanałów udostępniane do kodu Rust
    out property <color> layers_color_default: Kolory.tekst_slabszy;
    out property <color> layers_color_r: Kolory.kanal_r;
    out property <color> layers_color_g: Kolory.kanal_g;
    out property <color> layers_color_b: Kolory.kanal_b;
    out property <color> layers_color_group: Kolory.hover;
    out property <color> hover: Kolory.hover;
     // Rozmiar obszaru podglądu w środkowej kolumnie (do skalowania 1:1)
     // Aktualizowane przez timer ze względu na ograniczenia przypisań w Image
     in-out property <length> preview_area_width: 0px;
     in-out property <length> preview_area_height: 0px;
     callback preview-geometry-changed(length, length);
     // Ekspozycja wymiarów dla logów
     out property <length> window_width: self.width;
     out property <length> window_height: self.height;
    // Aktualnie otwarta z miniatury ścieżka (do zaznaczenia miniatury)
    in-out property <string> opened-thumbnail-path: "";

    // Properties for image controls
    in-out property <float> exposure-value: 0.0;
    in-out property <float> gamma-value: 2.2;
    // Usunięto obszar zakładek
     // Tonemap mode (0=ACES, 1=Reinhard, 2=Linear)
     in-out property <int> tonemap-mode: 2;
     callback tonemap-mode-changed(int);

    // Dolny panel (wariant A: 0px gdy ukryty)
    in-out property <bool> bottom-panel-visible: false;
    in-out property <length> bottom-panel-expanded-height: 160px;
    property <length> bottom-panel-current-height: bottom-panel-visible ? bottom-panel-expanded-height : 0px;

    // Callbacks
    callback exit();
    callback open-exr();
    callback exposure-changed(float);
    callback gamma-changed(float);
    callback layer-tree-clicked(string);
    callback choose-working-folder();
    callback open-thumbnail(string); // otwórz plik EXR z podanej ścieżki
    callback delete-thumbnail(string); // usuń plik na podstawie ścieżki
    callback open-console-window(); // otwórz okno konsoli
    callback navigate-thumbnails(int); // nawigacja miniatur: -1 wstecz, +1 dalej
    callback navigate-layers(int); // nawigacja warstw: -1 góra, +1 dół
    callback key-pressed-debug(string); // diagnostyka: logowanie nazwy klawisza
     // Export callbacks
     callback export-convert();
     callback export-beauty();
     callback export-channels();
     // New layer export callbacks
     callback export-base-png16();
     callback export-base-tiff16();
     callback export-base-tiff32();
     
     
     
     
     
     // Histogram callback
     callback histogram-requested();

    // Menu Bar
      Rectangle {
        y: 0px;
        x: 0px;
        width: root.width;
        height: 30px;
        background: Kolory.tlo;
        border-color: Kolory.obramowanie;
        border-width: 1px;
        
        HorizontalBox {
            padding: 4px;
            spacing: 0px;
            
            // File Menu Button
            Rectangle {
                width: 40px;
                height: 22px;
                background: file-menu-area.has-hover || file-menu-open ? Kolory.hover : Kolory.przezroczysty;
                
                Text {
                    text: "File";
                    color: Kolory.tekst;
                    font-size: 12px;
                    font-family: "Geist";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
                
                file-menu-area := TouchArea {
                    clicked => {
                        file-menu-open = !file-menu-open;
                        view-menu-open = false; // Zamknij inne menu
                        if (file-menu-open) {
                            file-menu-timer-running = true;
                        } else {
                            file-menu-timer-running = false;
                        }
                    }
                }
            }
            
            // View Menu Button
            Rectangle {
                width: 40px;
                height: 22px;
                background: view-menu-area.has-hover || view-menu-open ? Kolory.hover : Kolory.przezroczysty;
                
                Text {
                    text: "View";
                    color: Kolory.tekst;
                    font-size: 12px;
                    font-family: "Geist";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                }
                
                view-menu-area := TouchArea {
                    clicked => {
                        view-menu-open = !view-menu-open;
                        file-menu-open = false; // Zamknij inne menu
                        if (view-menu-open) {
                            view-menu-timer-running = true;
                        } else {
                            view-menu-timer-running = false;
                        }
                    }
                }
            }
        }

        // Image aligned with the right panel region in the menu bar
        if show-right-panel: Image {
            x: _right_panel_x;
            y: 0px;
            width: _right_panel_width;
            height: parent.height;
            source: @image-url("../resources/img/logo.png");
            image-fit: contain;
            horizontal-alignment: left;
            vertical-alignment: center;
        }
    }
    
    // Dropdown Menu 
    if file-menu-open: Rectangle {
        y: 30px;
        x: 4px;
        width: 100px;
        height: 52px;
        background: Kolory.menu_tlo;
        border-color: Kolory.menu_obramowanie;
        border-width: 1px;
        z: 10000;
        
        // TouchArea for hover detection (behind menu items)
        file-dropdown-area := TouchArea {
            width: parent.width;
            height: parent.height;
            z: -1; // Behind other elements
        }
        
        VerticalBox {
            padding: 0px;
            spacing: 0px;
            
            PozycjaMenu { width: 100px; text: "Open EXR"; clicked => { file-menu-open = false; file-menu-timer-running = false; open-exr(); } }
            Rectangle { height: 1px; background: Kolory.menu_obramowanie; } // separator
            PozycjaMenu { width: 100px; text: "Export Base (PNG)"; clicked => { file-menu-open = false; file-menu-timer-running = false; export-base-png16(); } }
            PozycjaMenu { width: 100px; text: "Export Base (TIFF)"; clicked => { file-menu-open = false; file-menu-timer-running = false; export-base-tiff16(); } }
            PozycjaMenu { width: 100px; text: "Export Base (Float)"; clicked => { file-menu-open = false; file-menu-timer-running = false; export-base-tiff32(); } }
            Rectangle { height: 1px; background: Kolory.menu_obramowanie; } // separator
            PozycjaMenu { width: 100px; text: "Exit"; clicked => { file-menu-open = false; file-menu-timer-running = false; exit(); } }
        }
        
        // Auto-close timer for File menu
        Timer {
            interval: 2000ms;
            running: file-menu-timer-running && !file-menu-area.has-hover && !file-dropdown-area.has-hover;
            triggered => { 
                file-menu-open = false; 
                file-menu-timer-running = false;
            }
        }
    }
    
    // View Dropdown Menu
    if view-menu-open: Rectangle {
        y: 30px;
        x: 4px + 40px; // align under the View button (after File's 40px)
        width: 160px;
        height: 156px; // 6 items * 26px
        background: Kolory.menu_tlo;
        border-color: Kolory.menu_obramowanie;
        border-width: 1px;
        z: 10000;
        
        // TouchArea for hover detection (behind menu items)
        view-dropdown-area := TouchArea {
            width: parent.width;
            height: parent.height;
            z: -1; // Behind other elements
        }
        
        VerticalBox {
            padding: 0px;
            spacing: 0px;
            
            PozycjaMenu { text: root.show-left-panel ? "Hide Left Panel" : "Show Left Panel"; clicked => { show-left-panel = !show-left-panel; view-menu-open = false; view-menu-timer-running = false; } }
            PozycjaMenu { text: root.show-right-panel ? "Hide Right Panel" : "Show Right Panel"; clicked => { show-right-panel = !show-right-panel; view-menu-open = false; view-menu-timer-running = false; } }
            PozycjaMenu { text: "Reset View"; clicked => { show-left-panel = true; show-right-panel = true; view-menu-open = false; view-menu-timer-running = false; } }
            PozycjaMenu { text: "Open Console"; clicked => { internal-console-visible = true; view-menu-open = false; view-menu-timer-running = false; } }
            PozycjaMenu { text: "Open Meta"; clicked => { internal-meta-visible = true; view-menu-open = false; view-menu-timer-running = false; } }
            PozycjaMenu { text: "Compute Histogram"; clicked => { internal-histogram-visible = true; histogram-requested(); view-menu-open = false; view-menu-timer-running = false; } }
        }
        
        // Auto-close timer for View menu
        Timer {
            interval: 2000ms;
            running: view-menu-timer-running && !view-menu-area.has-hover && !view-dropdown-area.has-hover;
            triggered => { 
                view-menu-open = false; 
                view-menu-timer-running = false;
            }
        }
    }
    
        
    // Main content area with three resizable columns
    HorizontalBox {
        y: 30px;
        x: 0px;
        width: root.width;
                 height: root.height - 78px - bottom-panel-current-height; // 30px menu + 24px status bar + 24px przyciski + dolny panel
        padding: 4px;
        spacing: 0px;

        // Dynamicznie obliczana szerokość elementów niebędących kolumnami (dopełnienie + widoczne separatory)
        property <length> _non_column_width: 8px + (show-left-panel ? 2px : 0px) + (show-right-panel ? 2px : 0px);
        
        // Helpery normalizujące szerokości na podstawie widoczności paneli
        property <float> _col1_eff: show-left-panel ? column1-percent : 0.0;
        property <float> _col2_eff: column2-percent + (show-left-panel ? 0.0 : column1-percent) + (show-right-panel ? 0.0 : column3-percent);
        property <float> _col3_eff: show-right-panel ? column3-percent : 0.0;
        property <float> _sum_eff: max(0.0001, column1-percent + column2-percent + column3-percent);
        property <float> _n1: _col1_eff / _sum_eff;
        property <float> _n2: _col2_eff / _sum_eff;
        property <float> _n3: _col3_eff / _sum_eff;

        // Column 1
        Rectangle {
            width: (root.width - _non_column_width) * _n1;
            visible: show-left-panel;
            clip: true;
            background: Kolory.panel_tlo;
            border-color: Kolory.linia_podzialu;
            border-width: 1px;
            
            VerticalBox {
                padding: 4px;
                spacing: 2px;
                alignment: start;
                
                
                // Lista warstw z obsługą przewijania (tylko pionowy; poziomy wyłączony przez klip i elipsę tekstu)
                layers_scroll := ScrollView {
                    height: parent.height - 10px;
                    width: parent.width -5px;

                    // Kontener treści zwężony względem viewportu (eliminuje poziomy scroll), wysokość według zawartości (pionowy scroll działa)
                    content_box := VerticalBox {
                        // zostaw zapas na pionowy scrollbar, by nie pojawiał się poziomy
                        width: max(0px, layers_scroll.width - 24px);
                        spacing: 1px;
                        alignment: start;

                        for layer-item[index] in layers-model: Rectangle {
                            height: 18px;
                            width: parent.width;
                            clip: true;
                            background: (root.selected-layer-item == layer-item) ? Kolory.hover
                                        : (layer-hover.has-hover ? Kolory.suwak_tlo : Kolory.przezroczysty);

                            // Lewy znacznik wyboru - szerszy i bardziej widoczny
                            Rectangle {
                                x: 0px;
                                width: (root.selected-layer-item == layer-item) ? 5px : 0px;
                                height: parent.height;
                                background: root.layers-colors[index];
                                border-radius: 2px;
                            }

                            Text {
                                text: layer-item;
                                color: root.layers-colors[index];
                                font-size: root.layers-font-sizes[index] * 1px;
                                font-family: "Geist";
                                vertical-alignment: center;
                                horizontal-alignment: left;
                                x: 4px;
                                width: parent.width - 8px;
                                wrap: no-wrap;
                                font-weight: (root.selected-layer-item == layer-item) ? 800 : 400;
                            }

                            layer-hover := TouchArea {
                                width: parent.width;
                                height: parent.height;
                                clicked => {
                                    // Wywołaj callback z nazwą klikniętego elementu
                                    layer-tree-clicked(layer-item);
                                }
                            }
                        }
                    }
                }
            }
            
            // Right border for resizing (bez zmian)
            Rectangle {
                x: parent.width - 4px;
                width: 4px;
                height: parent.height;
                background: Kolory.przezroczysty;
                
                TouchArea {
                    width: parent.width;
                    height: parent.height;
                    mouse-cursor: ew-resize;
                    
                    moved => {
                        if (self.pressed) {
                            column1-percent = max(0.05, min(0.90, column1-percent + (self.mouse-x - self.pressed-x) / (root.width - _non_column_width)));
                        }
                    }
                }
            }
        }
        
        // Splitter 1
        Rectangle {
            width: show-left-panel ? 2px : 0px;
            background: Kolory.linia_podzialu;
        }
        
        // Column 2
        Rectangle {
            width: (root.width - _non_column_width) * _n2;
            background: Kolory.panel_tlo;
            border-color: Kolory.linia_podzialu;
            border-width: 1px;
            // Synchronizuj rozmiar obszaru podglądu z rozmiarem tej kolumny
            // (obraz wypełnia całą kolumnę)
            Timer {
                interval: 100ms;
                running: true;
                triggered => {
                    if (parent.width != root.preview_area_width || parent.height != root.preview_area_height) {
                        root.preview_area_width = parent.width;
                        root.preview_area_height = parent.height;
                        root.preview-geometry-changed(root.preview_area_width, root.preview_area_height);
                    }
                    self.running = true;
                }
            }
            
            // Background image for the middle column
            Image {
                width: parent.width;
                height: parent.height;
                source: @image-url("../resources/img/pattern.png");
                horizontal-tiling: repeat;
                vertical-tiling: repeat;
                horizontal-alignment: left;
                vertical-alignment: top;
            }
            
            VerticalBox {
                padding: 0px;
                spacing: 0px;
                alignment: stretch; // ROZCIĄGNIJ DO WYPEŁNIENIA!
                
                // Obraz - dopasowuje rozmiar do zawartości
                preview_image := Image {
                    width: parent.width;
                    height: parent.height;
                    source: exr-image;
                    image-fit: contain;
                    vertical-alignment: top;
                    horizontal-alignment: center;
                }
                
                // Zakładki usunięte
                Rectangle { height: 0px; width: 0px; }
                
                // Zawartość zakładek usunięta
                Rectangle { height: 0px; width: 0px; }
            }
            
            // Right border for resizing
            Rectangle {
                x: parent.width - 4px;
                width: 4px;
                height: parent.height;
            background: Kolory.przezroczysty;
                
                TouchArea {
                    width: parent.width;
                    height: parent.height;
                    mouse-cursor: ew-resize;
                    
                    moved => {
                        if (self.pressed) {
                            column2-percent = max(0.05, min(0.90, column2-percent + (self.mouse-x - self.pressed-x) / (root.width - _non_column_width)));
                        }
                    }
                }
            }
        }
        
        // Splitter 2
        Rectangle {
            width: show-right-panel ? 2px : 0px;
            background: Kolory.linia_podzialu;
        }
        
        // Column 3
        Rectangle {
            width: (root.width - _non_column_width) * _n3;
            visible: show-right-panel;
            clip: true;
            background: Kolory.panel_tlo;
            border-color: Kolory.linia_podzialu;
            border-width: 1px;
            
            // Prawa kolumna: funkcje Exposure na górze
            VerticalBox {
                padding: 4px;
                spacing: 4px;
                alignment: start;
                property <length> controls_inset: 12px;

                // Unified left padding for labels and controls
                HorizontalBox {
                    alignment: start;
                    width: parent.width;
                    spacing: 0px;
                    ParameterSlider {
                        label-text: "Exposure:";
                        value: root.exposure-value;
                        min-value: -5.0;
                        max-value: 5.0;
                        slider-width: parent.width - controls_inset*2;
                        value-changed(new-value) => {
                            root.exposure-value = new-value;
                            root.exposure-changed(new-value);
                        }
                    }
                }
                
                HorizontalBox {
                    width: parent.width;
                    spacing: 0px;
                    ParameterSlider {
                        label-text: "Gamma:";
                        value: root.gamma-value;
                        min-value: 0.5;
                        max-value: 4.5;
                        slider-width: parent.width - controls_inset*2;
                        value-changed(new-value) => {
                            root.gamma-value = new-value;
                            root.gamma-changed(new-value);
                        }
                    }
                }

                 // Tonemap selector
                 HorizontalBox {
                     width: parent.width;
                     spacing: 0px;
                     Text {
                         text: "Tonemap:";
                         color: Kolory.tekst;
                         font-size: 13px;
                         font-family: "Geist";
                         font-weight: 300;
                         horizontal-alignment: left;
                         vertical-alignment: center;
                     }
                 }
                 tm_row := HorizontalBox {
                     width: parent.width;
                     height: 25px;
                     spacing: 12px;
                      // Linear
                     PrzyciskAkcji {
                         text: "Linear";
                         height: 22px;
                         width: (tm_row.width - controls_inset*2 - tm_row.spacing*2) / 3;
                         highlighted: root.tonemap-mode == 2;
                         clicked => { root.tonemap-mode = 2; root.tonemap-mode-changed(2); }
                     }
                     // ACES
                     PrzyciskAkcji {
                        
                         text: "ACES";
                         
                         height: 22px;
                         width: (tm_row.width - controls_inset*2 - tm_row.spacing*2) / 3;
                         highlighted: root.tonemap-mode == 0;
                         clicked => { root.tonemap-mode = 0; root.tonemap-mode-changed(0); }
                     }
                     // Reinhard
                     PrzyciskAkcji {
                         text: "Rein.";
                         height: 22px;
                         width: (tm_row.width - controls_inset*2 - tm_row.spacing*2) / 3;
                         highlighted: root.tonemap-mode == 1;
                         clicked => { root.tonemap-mode = 1; root.tonemap-mode-changed(1); }
                     }
                    
                 }

                // FAZA 3: Zaawansowane tone mapping
                HorizontalBox {
                    width: parent.width;
                    height: 25px;
                    spacing: 12px;
                    // Filmic
                     PrzyciskAkcji {
                         text: "Filmic";
                         height: 22px;
                         width: (parent.width - controls_inset*2 - 24px) / 3;
                         highlighted: root.tonemap-mode == 3;
                         clicked => { root.tonemap-mode = 3; root.tonemap-mode-changed(3); }
                     }
                     // Hable
                     PrzyciskAkcji {
                         text: "Hable";
                         height: 22px;
                         width: (parent.width - controls_inset*2 - 24px) / 3;
                         highlighted: root.tonemap-mode == 4;
                         clicked => { root.tonemap-mode = 4; root.tonemap-mode-changed(4); }
                     }
                     // Local Adaptation
                     PrzyciskAkcji {
                         text: "Local";
                         height: 22px;
                         width: (parent.width - controls_inset*2 - 24px) / 3;
                         highlighted: root.tonemap-mode == 5;
                         clicked => { root.tonemap-mode = 5; root.tonemap-mode-changed(5); }
                     }
                }
                
                HorizontalBox {
                    width: parent.width;
                    height: 25px;
                    spacing: 6px;
                    PrzyciskAkcji {
                        text: "Reset";
                        height: 25px;
                        width: parent.width - controls_inset*2;
                        clicked => {
                            exposure-value = 0.0;
                            gamma-value = 2.2;
                             // Przywróć domyślny tryb tonemappingu: Linear
                             root.tonemap-mode = 2;
                             root.tonemap-mode-changed(2);
                            exposure-changed(exposure-value);
                            gamma-changed(gamma-value);
                        }
                    }
                }
                
                // Spacer
                Rectangle {
                    height: 2px;
                }
                








                // Spacer
                Rectangle {
                    height: 2px;
                }
                
                // Export section
                HorizontalBox {
                    width: parent.width;
                    spacing: 0px;
                    Text {
                        text: "Export";
                        color: Kolory.tekst;
                        font-size: 13px;
                        font-family: "Geist";
                        font-weight: 300;
                        horizontal-alignment: left;
                        vertical-alignment: center;
                    }
                }

                // Convert: EXR -> TIFF (32F RGBA)
                HorizontalBox { width: parent.width; height: 25px; spacing: 0px;
                    PrzyciskAkcji { text: "Export All16 bit"; height: 25px; width: parent.width - controls_inset*2; clicked => { export-convert(); } }
                }

                // Export Beauty: 16-bit PNG (with exposure/gamma)
                HorizontalBox { width: parent.width; height: 25px; spacing: 0px;
                    PrzyciskAkcji { text: "Export default"; height: 25px; width: parent.width - controls_inset*2; clicked => { export-beauty(); } }
                }

                // Export Channels: PNG16 grayscale per channel
                HorizontalBox { width: parent.width; height: 25px; spacing: 0px;
                    PrzyciskAkcji { text: "Export prefix"; height: 25px; width: parent.width - controls_inset*2; clicked => { export-channels(); } }
                }

            }

            // Nakładka maskująca prawą krawędź, aby uniknąć podwójnego obramowania przy krawędzi okna
            Rectangle {
                x: parent.width - 1px;
                width: 1px;
                height: parent.height;
                background: Kolory.panel_tlo;
            }
        }
         }

    // Dolny panel (pełna szerokość, nad paskiem przycisków i statusem)
    thumbs_panel := Rectangle {
         x: 0px;
         y: root.height - 24px - 24px - bottom-panel-current-height;
         width: root.width;
         height: bottom-panel-current-height;
         background: Kolory.menu_tlo;
         border-color: Kolory.obramowanie;
         border-width: 1px;
         clip: true;

         animate height { duration: 300ms; easing: ease-in-out; }
         
         // Loading overlay
         if root.is-loading: Rectangle {
             x: 0px;
             y: 0px;
             width: parent.width;
             height: parent.height;
             background: #00000080;
             z: 10;
             
             VerticalBox {
                 width: parent.width;
                 height: parent.height;
                 alignment: center;
                 spacing: 16px;
                 
                 // Spinning loader (simplified)
                 Rectangle {
                     width: 32px;
                     height: 32px;
                     background: Kolory.progress_fill;
                     border-radius: 16px;
                     
                     // Simple pulse animation
                     property <float> scale: 1.0;
                     property <bool> growing: true;
                     
                     Timer {
                         interval: 100ms;
                         running: root.is-loading;
                         triggered => { 
                             if (parent.growing) {
                                 parent.scale = Math.min(1.3, parent.scale + 0.1);
                                 if (parent.scale >= 1.3) {
                                     parent.growing = false;
                                 }
                             } else {
                                 parent.scale = Math.max(0.7, parent.scale - 0.1);
                                 if (parent.scale <= 0.7) {
                                     parent.growing = true;
                                 }
                             }
                         }
                     }
                 }
                 
                 // Loading text
                 Text {
                     text: root.loading-operation;
                     color: #ffffff;
                     font-size: 14px;
                     font-family: "Geist";
                     horizontal-alignment: center;
                 }
                 
                 // Progress info
                 if root.loading-progress-total > 0: Text {
                     text: root.loading-progress-current + " / " + root.loading-progress-total;
                     color: #ffffff80;
                     font-size: 12px;
                     font-family: "Geist";
                     horizontal-alignment: center;
                 }
             }
         }

        property <length> thumbs_bar_height: 10px;
        // Tooltip state (panel-level)
        property <bool> tt_visible: false;
        property <string> tt_text: "";
        property <length> tt_x: 0px;
        property <length> tt_y: 0px;
        // Opóźnienie wyświetlania tooltipa w tickach timera (tick = 80ms)
        property <int> tt_delay_ticks: 3;
        // Który kafelek aktualnie kontroluje tooltip (ścieżka)
        property <string> tt_owner_path: "";
        


        // Context menu state (panel-level)
        property <bool> ctx_visible: false;
        property <string> ctx_path: "";
        property <length> ctx_x: 0px;
        property <length> ctx_y: 0px;
        property <int> ctx_longpress_ticks: 4; // ≈ 320ms przy 80ms ticku
        // Dwuklik do otwierania
        property <int> dbl_click_ticks: 2; // ≈ 160ms

        viewport := Rectangle {
            x: 6px;
            y: 6px;
            width: parent.width - 12px;
            height: parent.height - 12px - thumbs_panel.thumbs_bar_height - 4px;
            clip: true;

            scroll_view := ScrollView {
                width: parent.width;
                height: parent.height;

                thumbs_content := HorizontalLayout {
                    spacing: 24px;

                    for t[index] in root.thumbnails: Rectangle {
                        // licznik opóźnienia dla konkretnego kafelka
                        property <int> hover_ticks: 0;
                        // licznik do long-press (otwarcie menu kontekstowego)
                        property <int> press_ticks: 0;
                        // Uzbrajanie dwukliku (true po pierwszym kliku do czasu wygaśnięcia timera)
                        property <bool> dbl_arm: false;
                        // Jednorazowy timer okna dwukliku
                        dbl_timer := Timer { interval: 350ms; running: false; triggered => { parent.dbl_arm = false; } }
                        width: max(0px, viewport.height - 12px - desc.height - 1.6px)
                                  * ((t.width * 1.0) / (t.height * 1.0));
                        height: viewport.height - 12px;
                        background: Kolory.przezroczysty;

                        VerticalBox {
                            padding: 0px;
                            spacing: 1.6px;
                            alignment: start;
                            height: parent.height;

                            image_frame := Rectangle {
                                width: parent.width;
                                height: max(0px, viewport.height - 12px - desc.height - 1.6px);
                                background: Kolory.przezroczysty;
                                border-width: (root.opened-thumbnail-path == t.path) ? 2px : (tile_area.has-hover ? 2px : 0px);
                                border-color: (root.opened-thumbnail-path == t.path) ? #ffffff : root.hover;
                                clip: true;

                                Image {
                                    width: parent.width;
                                    height: parent.height;
                                    source: t.img;
                                    image-fit: contain;
                                    horizontal-alignment: center;
                                    vertical-alignment: center;
                                }
                            }

                            desc := Rectangle {
                                width: parent.width;
                                height: 36px;
                                clip: true;
                                background: Kolory.przezroczysty;
                                VerticalBox {
                                    width: parent.width;
                                    height: parent.height;
                                    spacing: 0px;
                                    alignment: start;
                                    Text { text: t.name;  color: Kolory.tekst; font-size: 10px; font-family: "Geist"; horizontal-alignment: left; x: 6px; }
                                    Text { text: t.size + "  •  " + t.layers;  color: Kolory.tekst; font-size: 8px;  font-family: "Geist"; horizontal-alignment: left; x: 6px; }
                                }
                            }
                        }
                        
                        tile_area := TouchArea {
                            width: parent.width;
                            height: parent.height;
                            mouse-cursor: MouseCursor.pointer;
                            clicked => {
                                // Jeżeli widoczne menu – zamknij i nie otwieraj pliku
                                if (thumbs_panel.ctx_visible) { root.key-pressed-debug("ctx close-before-click"); thumbs_panel.ctx_visible = false; return; }
                                if (parent.dbl_arm) {
                                    root.key-pressed-debug("thumb open (double-click): " + t.path);
                                    root.opened-thumbnail-path = t.path; root.open-thumbnail(t.path);
                                    parent.dbl_arm = false;
                                    dbl_timer.running = false;
                                } else {
                                    parent.dbl_arm = true;
                                    dbl_timer.running = true;
                                    root.key-pressed-debug("thumb single-click arm");
                                }
                            }
                            moved => {
                                    if (self.has-hover && (thumbs_panel.tt_owner_path == "" || thumbs_panel.tt_owner_path == t.path)) {
                                        thumbs_panel.tt_x = viewport.x + parent.x - scroll_view.viewport-x + self.mouse-x + 12px;
                                        thumbs_panel.tt_y = viewport.y + parent.y + self.mouse-y + 12px;
                                    }
                            }
                            // Obsługa prawego przycisku (najnowsze Slint) – jeśli dostępna
                            pointer-event(ev) => {
                                // Prawy klik (jeśli dostępny w tej wersji Slint)
                                if (ev.kind == PointerEventKind.down && ev.button == PointerEventButton.right) {
                                    root.key-pressed-debug("ctx right-click: " + t.path);
                                    thumbs_panel.ctx_visible = true;
                                    thumbs_panel.ctx_path = t.path;
                                    // Fallback: brak pozycji w ev → użyj pozycji myszy z TouchArea
                                    thumbs_panel.ctx_x = viewport.x + parent.x - scroll_view.viewport-x + self.mouse-x;
                                    thumbs_panel.ctx_y = viewport.y + parent.y + self.mouse-y;
                                    auto_hide_timer.running = false; auto_hide_timer.running = true;
                                }
                            }
                        }
                        Timer {
                            interval: 80ms;
                            running: true;
                            triggered => {
                                if (tile_area.has-hover) {
                                    // Jeśli nikt nie posiada tooltipa lub właścicielem jest ten kafelek, licz odliczanie
                                    if (thumbs_panel.tt_owner_path == "" || thumbs_panel.tt_owner_path == t.path) {
                                        parent.hover_ticks = Math.min(100000, parent.hover_ticks + 1);
                                        if (parent.hover_ticks >= thumbs_panel.tt_delay_ticks) {
                                            thumbs_panel.tt_visible = true;
                                            // Pokaż tylko nazwę pliku
                                            thumbs_panel.tt_text = t.name;
                                            thumbs_panel.tt_owner_path = t.path;
                                            // aktualna pozycja kursora
                                            thumbs_panel.tt_x = viewport.x + parent.x - scroll_view.viewport-x + tile_area.mouse-x + 12px;
                                            thumbs_panel.tt_y = viewport.y + parent.y + tile_area.mouse-y + 12px;
                                        }
                                    } else {
                                        // inny kafelek jest właścicielem – reset lokalnego licznika
                                        parent.hover_ticks = 0;
                                    }

                                    // Long-press do menu kontekstowego
                                    if (tile_area.pressed) {
                                        if (parent.press_ticks == 0) { root.key-pressed-debug("ctx press-start: " + t.path); }
                                        parent.press_ticks = Math.min(100000, parent.press_ticks + 1);
                                        if (parent.press_ticks >= thumbs_panel.ctx_longpress_ticks && !thumbs_panel.ctx_visible) {
                                            root.key-pressed-debug("ctx open: " + t.path);
                                            thumbs_panel.ctx_visible = true;
                                            thumbs_panel.ctx_path = t.path;
                                            thumbs_panel.ctx_x = viewport.x + parent.x - scroll_view.viewport-x + tile_area.mouse-x;
                                            thumbs_panel.ctx_y = viewport.y + parent.y + tile_area.mouse-y;
                                            auto_hide_timer.running = false; auto_hide_timer.running = true;
                                        }
                                    } else {
                                        parent.press_ticks = 0;
                                    }
                                    // brak obsługi ticków dla dwukliku — używamy jednorazowego timera per-kafelek
                                } else {
                                    // zakończenie hovera – jeśli to był właściciel, schowaj i zwolnij
                                    if (thumbs_panel.tt_owner_path == t.path) {
                                        thumbs_panel.tt_visible = false;
                                        thumbs_panel.tt_owner_path = "";
                                    }
                                    parent.hover_ticks = 0;
                                    parent.press_ticks = 0;
                                    parent.dbl_arm = false;
                                }
                                self.running = true;
                            }
                        }
                    }
                }
            }
        }

        // Overlay tooltip for the whole thumbnails panel
        panel_tooltip := Rectangle {
            visible: thumbs_panel.tt_visible;
            width: max(100px, min(parent.width - 8px, tooltip_text.preferred-width + 12px));
            height: max(20px, min(parent.height - 8px, tooltip_text.preferred-height + 8px));
            x: min(parent.width - self.width - 4px, max(4px, thumbs_panel.tt_x));
            y: min(parent.height - self.height - 4px, max(4px, thumbs_panel.tt_y));
            background: Kolory.tlo;
            // border-color: #000000;
            // border-width: 2px;
            border-radius: 10px;
            opacity: 0.8;
            z: 10000;

            tooltip_text := Text {
                // Ogranicz maksymalną szerokość, a rozmiar wynikowy pobierz z preferred-size
                max-width: 420px;
                text: thumbs_panel.tt_text;
                wrap: word-wrap;
                color: Kolory.tekst;
                font-size: 10px;
                font-family: "Geist";
                horizontal-alignment: left;
                x: 6px;
                y: 4px;
            }
        }

        // Overlay context menu (panel-level)
        ctx_menu := Rectangle {
            visible: thumbs_panel.ctx_visible;
            x: min(parent.width - self.width - 4px, max(4px, thumbs_panel.ctx_x));
            y: min(parent.height - self.height - 4px, max(4px, thumbs_panel.ctx_y));
            width: 180px;
            height: 26px;
            background: Kolory.menu_tlo;
            border-color: Kolory.menu_obramowanie;
            border-width: 1px;
            z: 2000;

            VerticalBox {
                padding: 0px;
                spacing: 0px;
                PozycjaMenu {
                    width: parent.width;
                    text: "Delete file";
                    clicked => {
                        thumbs_panel.ctx_visible = false;
                        root.key-pressed-debug("ctx delete: " + thumbs_panel.ctx_path);
                        root.delete-thumbnail(thumbs_panel.ctx_path);
                    }
                }
            }
        }

        // Dismiss area to close context menu when clicking elsewhere
        ctx_dismiss := TouchArea {
            visible: thumbs_panel.ctx_visible;
            width: parent.width;
            height: parent.height;
            clicked => { root.key-pressed-debug("ctx dismiss"); thumbs_panel.ctx_visible = false; }
            z: 1500;
        }

        // Auto-hide: zniknij po 2.5 s bez interakcji, albo natychmiast po kliknięciu poza menu
        auto_hide_timer := Timer {
            interval: 2500ms;
            running: false;
            triggered => { thumbs_panel.ctx_visible = false; self.running = false; }
        }

        thumbs_bar := Rectangle {
            x: 6px;
            y: 6px + viewport.height + 2px;
            width: parent.width - 12px;
            height: thumbs_panel.thumbs_bar_height;
            visible: scroll_view.viewport-width < thumbs_content.width;
            background: Kolory.suwak_tlo;
            border-radius: 4px;
            border-width: 1px;
            border-color: Kolory.menu_obramowanie;

            hover_area := TouchArea {
                width: parent.width;
                height: parent.height;
            }

            handle := Rectangle {
                property <length> content_w: max(1px, thumbs_content.width);
                property <length> viewport_w: scroll_view.viewport-width;
                width: max(20px, (viewport_w / content_w) * thumbs_bar.width);
                height: hover_area.has-hover || drag.pressed ? parent.height : 4px;
                y: (parent.height - self.height) / 2;
                animate height { duration: 200ms; easing: ease-in-out; }
                animate y { duration: 200ms; easing: ease-in-out; }

                x: (content_w > viewport_w)
                   ? (scroll_view.viewport-x / (content_w - viewport_w)) * (thumbs_bar.width - self.width)
                   : 0px;
                background: Kolory.suwak_tor;
                border-radius: 4px;
                Rectangle { x: 0px; y: 0px; width: parent.width; height: 1px; background: #80808040; }

                drag := TouchArea {
                    width: parent.width;
                    height: parent.height;
                    moved => {
                        if (self.pressed) {
                            scroll_view.viewport-x = ((max(0px, min(thumbs_bar.width - handle.width, handle.x + (self.mouse-x - self.pressed-x)))) / max(1px, thumbs_bar.width - handle.width)) * (content_w - viewport_w);
                        }
                    }
                    clicked => {
                        scroll_view.viewport-x = ((max(0px, min(thumbs_bar.width - handle.width, self.mouse-x - handle.width/2))) / max(1px, thumbs_bar.width - handle.width)) * (content_w - viewport_w);
                    }
                }
            }
        }
     }
     
     // Przyciski między panelem z miniaturkami a status barem
     Rectangle {
         x: 0px;
         y: root.height - 24px - 30px; // 24px status bar + 40px button bar
         width: root.width;
         height: 40px; // Fixed height for the button bar
         background: Kolory.menu_tlo; // Assuming the same background as menu/status bar
         border-color: Kolory.obramowanie;
         border-width: 1px;

         HorizontalBox {
             width: parent.width;
             height: parent.height;
              padding: 7px;
             spacing: 4px;
             alignment: center;
         
         // Nowy przycisk po LEWEJ stronie "Pokaż panel"
         Rectangle {
             width: 140px;
             height: 20px;
             background: left_extra_area.has-hover ? Kolory.hover : Kolory.suwak_tlo;
             border-color: Kolory.suwak_tor;
             border-width: 1px;
             border-radius: 3px;

             Text {
                 text: root.show-left-panel ? "Hide Layers" : "Show Layers";
                 color: Kolory.tekst;
                 font-size: 10px;
                 font-family: "Geist";
                 horizontal-alignment: center;
                 vertical-alignment: center;
             }

            left_extra_area := TouchArea {
                 width: parent.width;
                 height: parent.height;
                clicked => { show-left-panel = !show-left-panel; }
             }
         }
         
         // Przycisk "Pokaż panel"
         Rectangle {
             width: 140px;
             height: 20px;
             background: toggle_panel_area.has-hover ? Kolory.hover : Kolory.suwak_tlo;
             border-color: Kolory.suwak_tor;
             border-width: 1px;
             border-radius: 3px;

             Text {
                 text: bottom-panel-visible ? "Hide panel" : "Show panel";
                 color: Kolory.tekst;
                 font-size: 10px;
                 font-family: "Geist";
                 horizontal-alignment: center;
                 vertical-alignment: center;
             }

             toggle_panel_area := TouchArea {
                 width: parent.width;
                 height: parent.height;
                 clicked => { bottom-panel-visible = !bottom-panel-visible; }
             }
         }
         
         // Przycisk "Select working folder"
         Rectangle {
             width: 140px;
             height: 20px;
             background: choose_folder_area.has-hover ? Kolory.hover : Kolory.suwak_tlo;
             border-color: Kolory.suwak_tor;
             border-width: 1px;
             border-radius: 3px;

             Text {
                 text: "Select working folder";
                 color: Kolory.tekst;
                 font-size: 10px;
                 font-family: "Geist";
                 horizontal-alignment: center;
                 vertical-alignment: center;
             }

             choose_folder_area := TouchArea {
                 width: parent.width;
                 height: parent.height;
                 clicked => { root.choose-working-folder(); }
             }
         }

         // Nowy przycisk po PRAWEJ stronie "Select working folder"
         Rectangle {
             width: 140px;
             height: 20px;
             background: right_extra_area.has-hover ? Kolory.hover : Kolory.suwak_tlo;
             border-color: Kolory.suwak_tor;
             border-width: 1px;
             border-radius: 3px;

             Text {
                 text: root.show-right-panel ? "Hide Controls" : "Show Controls";
                 color: Kolory.tekst;
                 font-size: 10px;
                 font-family: "Geist";
                 horizontal-alignment: center;
                 vertical-alignment: center;
             }

            right_extra_area := TouchArea {
                 width: parent.width;
                 height: parent.height;
                clicked => { show-right-panel = !show-right-panel; }
             }
         }
     }
     
     }

     // Status Bar
     Rectangle {
         y: root.height - 24px;
         x: 0px;
         width: root.width;
         height: 24px;
          background: Kolory.menu_tlo;
          border-color: Kolory.obramowanie;
         border-width: 1px;
         
         HorizontalBox {
             padding: 4px;
             spacing: 8px;
             alignment: stretch;
             
             // Column 1 - status text (lewa strona)
             Rectangle {
                width: root.width/3 - 12px;

                 Text {
                     horizontal-alignment: TextHorizontalAlignment.left;
                     font-size: 10px;
                     text: status-text;
                      font-family: "Geist";
                     x:15px;

                 }
             }
             
             // Column 2 - Empty space (środek)
             Rectangle {
                width: root.width/3 - 12px;
             }
             
             // Column 3 - progress (right side)
             Rectangle {
                width: root.width/3 - 12px;

                // Progress bar anchored to the right
                Rectangle {
                    // container
                    width: parent.width * 0.75;
                    height: 8px;
                    x: parent.width - self.width - 8px;
                    y: (parent.height - self.height) / 2;
                    background: Kolory.suwak_tlo;
                    border-radius: 4px;

                    // fill - naprawione: wypełnienie rośnie od lewej do prawej
                    if root.progress-value >= 0.0: Rectangle {
                        width: parent.width * max(0.0, min(1.0, root.progress-value));
                        height: parent.height;
                        x: 0px; // Zawsze od lewej strony
                        y: 0px;
                        background: Kolory.progress_fill;
                        border-radius: 4px;
                    }

                    // indeterminate animation when progress-value < 0
                    if root.progress-value < 0.0: Rectangle {
                        y: 0px;
                        height: parent.height;
                        width: parent.width * 0.25;
                        background: Kolory.progress_fill;
                        border-radius: 4px;
                        property <float> phase: 0.0;
                        // move chunk across continuously
                        x: (parent.width - self.width) * phase;
                        Timer {
                            interval: 16ms;
                            running: true;
                            triggered => { parent.phase = Math.mod(parent.phase + 0.01, 1.0); self.running = true; }
                        }
                    }
                }
                
                // Loading info text below progress bar
                if root.is-loading: Text {
                    width: parent.width * 0.75;
                    x: parent.width - self.width - 8px;
                    y: 12px;
                    horizontal-alignment: TextHorizontalAlignment.center;
                    font-size: 9px;
                    font-family: "Geist";
                    color: Kolory.tekst_slabszy;
                    text: root.loading-operation;
                }
                
                // Progress counter (e.g., "5/20")
                if root.is-loading && root.loading-progress-total > 0: Text {
                    width: parent.width * 0.75;
                    x: parent.width - self.width - 8px;
                    y: 24px;
                    horizontal-alignment: TextHorizontalAlignment.center;
                    font-size: 8px;
                    font-family: "Geist";
                    color: Kolory.tekst_slabszy;
                    text: root.loading-progress-current + "/" + root.loading-progress-total;
                }
             }
         }
     }
     if internal-console-visible: ConsoleWindow {
         width: 520px; // Preferred width from console_window.slint
         height: 360px; // Preferred width from console_window.slint
         console-text: root.console-text;
         clear-console => { root.clear-console(); }
         exit => { root.internal-console-visible = false; }
         z: 1000; // Ensure it's on top
         container-width: root.width;
         container-height: root.height;
         top-margin: 30px;
         bottom-margin: 24px + 24px; // pasek przycisków + status bar
     }

    // Floating Meta window
    if internal-meta-visible: MetaWindow {
        width: 640px;
        height: 480px;
        meta-table-keys: root.meta-table-keys;
        meta-table-values: root.meta-table-values;
        exit => { root.internal-meta-visible = false; }
        z: 1000;
        container-width: root.width;
        container-height: root.height;
        top-margin: 30px;
        bottom-margin: 24px + 24px; // pasek przycisków + status bar
    }

    // Floating Histogram window
    if internal-histogram-visible: HistogramWindow {
        width: 800px;
        height: 600px;
        histogram-red-data: root.histogram-red-data;
        histogram-green-data: root.histogram-green-data;
        histogram-blue-data: root.histogram-blue-data;
        histogram-luminance-data: root.histogram-luminance-data;
        histogram-min-value: root.histogram-min-value;
        histogram-max-value: root.histogram-max-value;
        histogram-total-pixels: root.histogram-total-pixels;
        histogram-p1: root.histogram-p1;
        histogram-p50: root.histogram-p50;
        histogram-p99: root.histogram-p99;
        exit => { root.internal-histogram-visible = false; }
        z: 1000;
        container-width: root.width;
        container-height: root.height;
        top-margin: 30px;
        bottom-margin: 24px + 24px; // pasek przycisków + status bar
    }

     // Global keyboard shortcuts via FocusScope
     shortcuts := FocusScope {
         x: 0px; y: 0px;
         width: root.width; height: root.height;
         key-pressed(event) => {
             // Diagnostyka: loguj nazwę klawisza (może być pusta dla strzałek na niektórych platformach)
             key-pressed-debug(event.text);
             if (event.text == "l" || event.text == "L") {
                 root.show-left-panel = !root.show-left-panel; return accept;
             } else if (event.text == "c" || event.text == "C") {
                 root.show-right-panel = !root.show-right-panel; return accept;
             } else if (event.text == "m" || event.text == "M") {
                 root.internal-meta-visible = !root.internal-meta-visible; return accept;
              } else if (event.text == "x" || event.text == "X") {
                  // Pokaż/ukryj wszystkie panele (lewy, prawy, dolny)
                  if (root.show-left-panel || root.show-right-panel || root.bottom-panel-visible) {
                      root.show-left-panel = false;
                      root.show-right-panel = false;
                      root.bottom-panel-visible = false; return accept;
                  } else {
                      root.show-left-panel = true;
                      root.show-right-panel = true;
                      root.bottom-panel-visible = true; return accept;
                  }
             } else if (event.text == " ") {
                 root.bottom-panel-visible = !root.bottom-panel-visible; return accept;
             } else if (event.text == "~" || event.text == "`") {
                 root.internal-console-visible = !root.internal-console-visible; return accept;
             } else if (event.text == "h" || event.text == "H") {
                 root.internal-histogram-visible = !root.internal-histogram-visible; return accept;
             } else if (event.text == "Up" || event.text == "ArrowUp" || event.text == "") {
                 root.navigate-layers(-1); return accept;
             } else if (event.text == "Down" || event.text == "ArrowDown" || event.text == "") {
                 root.navigate-layers(1); return accept;
             } else if (event.text == "Left" || event.text == "ArrowLeft" || event.text == "") {
                 root.navigate-thumbnails(-1); return accept;
             } else if (event.text == "Right" || event.text == "ArrowRight" || event.text == "") {
                 root.navigate-thumbnails(1); return accept;
             }
             return reject;
         }
     }

     // ensure focus on startup
     init => { shortcuts.focus(); }
 }